name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: superuser
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
    DOCKERHUB_USERNAME: siddharth67
    
jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ${{ matrix.operating_system }}
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        services:
            mongo-db:
              image: siddharth67/mongo-db:non-prod
              ports:
                - 27017:27017
        strategy:
            matrix:
                nodejs_version: [18,  20]
                operating_system: [ubuntu-latest]
                # exclude:
                #     - nodejs_version: [18, 19, 20]
                #       operating_system: [macos-latest]
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }} on ${{ matrix.operating_system }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}     

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: node-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
          if: always() && (steps.node-unit-testing-step.outcome == 'failure' || steps.node-unit-testing-step.outcome == 'success')
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        container: 
           image: node:18
        services:
            mongo-db:
                image: siddharth67/mongo-db:non-prod
                options: 
                    --name mongo
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version - 18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}     
                
        - name: Install Dependencies
          run: npm install
    
        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    reports-s3:
      needs: [code-coverage, unit-testing]
      name: AWS S3 - Upload Reports
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
        - name: Download Mocha Test Artifact
          uses: actions/download-artifact@v3
          with:
            name: Mocha-Test-Result

        - name: Download Code Coverage Artifact
          uses: actions/download-artifact@v3
          with:
            name: Code-Coverage-Result

        - name: Merge Test Files
          run: |
            ls -ltr
            mkdir reports-${{ github.sha }}
            mv cobertura-coverage.xml reports-${{ github.sha }}/
            mv test-results.xml reports-${{ github.sha }}/
            ls -ltr reports-${{ github.sha }}/
        
        - name: Upload to AWS S3
          uses: jakejarvis/s3-sync-action@master
          with:
            args:  --follow-symlinks --delete
          env:
            AWS_S3_BUCKET: solar-system-reports-bucket-2
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: 'us-east-1'                       
            SOURCE_DIR: 'reports-${{ github.sha }}'
            DEST_DIR: 'reports-${{ github.sha }}'

    docker:
        name: Containerization
        permissions: 
            packages: write
        runs-on: ubuntu-latest
        needs: [code-coverage, unit-testing]
        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ env.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: Login to GitHub Container Registry
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker Build For Testing
          uses: docker/build-push-action@v4
          with:
            context: .
            load: true
            push: false
            tags: ${{ env.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image Test
          run: |
            docker images
            docker run --name solar-system-app -d  \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ env.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
            
            echo Testing Image URL using wget 
            wget -q -O - 127.0.0.1:3000/live | grep live	

        - name: Docker Build and Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
                 ${{ env.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                 ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      # name: Deploy to Dev Environment
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-username: ${{ vars.MONGO_USERNAME }}
        mongodb-uri: ${{ vars.MONGO_URI }}
        docker-username: ${{ vars.DOCKERHUB_USERNAME }}
        k8s-manifest-dir: kubernetes/development/
        environment: development

    dev-integration-test:
      if: contains(github.ref, 'feature/')
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.application-url }}
          run: |
            echo $URL
            curl https://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/main'
    #  name: Deploy to Prod Environment
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-username: ${{ vars.MONGO_USERNAME }}
        mongodb-uri: ${{ vars.MONGO_URI }}
        docker-username: ${{ vars.DOCKERHUB_USERNAME }}
        k8s-manifest-dir: kubernetes/development/
        environment: production

    prod-integration-test:
      if: github.ref == 'refs/heads/main'
      name: Prod Integration Testing
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.prod-deploy.outputs.application-url }}
          run: |
            echo $URL
            curl https://$URL/live -s -k | jq -r .status | grep -i live

    slack-notification:
      name: Slack Notification
      needs: [dev-integration-test, prod-integration-test]
      continue-on-error: true
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: flux-alerts-channel
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
          SLACK_ICON: https://gitlab.com/sidd-harth/solar-system/-/raw/main/images/saturn.png
          SLACK_MESSAGE: 'Post Content :rocket:'
          SLACK_TITLE: Post Title
          SLACK_USERNAME: ga-bot